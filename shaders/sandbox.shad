struct SceneUBO
{
	mat4 projMat;
	mat4 viewMat;
	mat4 starMapMat;
	float starMapIntensity;
	float ambientColor;
	float exposure;
	float logDepthFarPlane;
	float logDepthC;
};

struct PlanetUBO
{
	mat4 modelMat;
	mat4 atmoMat;
	mat4 ringFarMat;
	mat4 ringNearMat;
	mat4 flareMat;
	vec4 flareColor;
	vec4 planetPos;
	vec4 lightDir;
	vec4 K;
	vec4 mask0ColorHardness;
	vec4 mask1ColorHardness;
	vec4 ringNormal;
	float ringInner;
	float ringOuter;
	float starBrightness;
	float cloudDisp;
	float nightIntensity;
	float radius;
	float atmoHeight;
};

struct FlareUBO
{
	mat4 modelMat;
	vec4 color;
	float brightness;
};

mat4 getMatrix(PlanetUBO ubo)
{
#if defined(IS_ATMO)
	return ubo.atmoMat;
#elif defined(IS_FAR_RING)
	return ubo.ringFarMat;
#elif defined(IS_NEAR_RING)
	return ubo.ringNearMat;
#else
	return ubo.modelMat;
#endif
}

float logDepth(float w, float farPlane, float C)
{
	return log2(max(1e-6, C*w+1.0)) * farPlane * w;
}

float rayleigh(float cc)
{
	return 0.75 * (1.0 + cc);
}

const float G_M = -0.85;
const float G_M2 = G_M*G_M;

float mie(float c, float cc)
{
	float a = (1.0-G_M2)*(1.0+cc);
	float b = 1.0 + G_M2 - 2.0*G_M*c;
	b*= sqrt(b);
	b*= 2.0+G_M2;

	return 1.5*a/b;
}

vec2 ray_sphere(vec3 ori, vec3 ray, float radius)
{
	float b = dot(ori, ray);
	float c = dot(ori,ori) - radius*radius;
	float d = b*b-c;
	if (d < 0) return vec2(+1.0/0.0, -1.0/0.0);
	float e = sqrt(d);
	return vec2(-b-e, -b+e);
}

const int IN_SAMPLES_ATMO = 10;

vec3 in_scattering_atmo(
	vec3 pos,
	vec3 view_dir,
	float view_dist,
	vec3 light_dir,
	float radius,
	float atmos_height,
	sampler2D atmo,
	vec4 K)
{
	float far = min(view_dist, ray_sphere(pos, view_dir, radius+atmos_height).y);
	if (far < 0) return vec3(0);
	float len = far/float(IN_SAMPLES_ATMO);
	vec3 step = view_dir*len;
	vec3 v = pos+step*0.5;

	vec3 sum = vec3(0.0);
	for (int i=0;i<IN_SAMPLES_ATMO;++i)
	{
		float alt = (length(v)-radius)/atmos_height;
		vec3 norm_v = normalize(v);

		float angle_view = dot(norm_v, view_dir)*0.5+0.5;
		float angle_light = dot(norm_v, light_dir)*0.5+0.5;

		vec2 s = texture(atmo, vec2(angle_view,alt)).rg;

		float n = s.g + texture(atmo, vec2(angle_light,alt)).g;
		float dens = s.r;
		sum += dens * exp(-n*(K.xyz+K.www));
		v += step;
	}

	sum *= len / atmos_height;

	return sum;
}

const int IN_SAMPLES_PLANET = 50;

vec3 in_scattering_planet(
	vec3 pos,
	vec3 view_dir,
	float view_dist,
	vec3 light_dir,
	float radius,
	float atmos_height,
	sampler2D atmo,
	vec4 K)
{
	float far = min(view_dist, ray_sphere(pos, view_dir, radius+atmos_height).y);
	float len = far/float(IN_SAMPLES_PLANET);
	vec3 step = view_dir*len;
	vec3 v = pos+step*0.5;

	vec3 sum = vec3(0.0);
	for (int i=0;i<IN_SAMPLES_PLANET;++i)
	{
		float alt = (length(v)-radius)/atmos_height;
		vec3 norm_v = normalize(v);

		float angle_view = dot(norm_v, view_dir)*0.5+0.5;
		float angle_light = dot(norm_v, light_dir)*0.5+0.5;

		vec2 s = texture(atmo, vec2(angle_view,alt)).rg;

		float n = s.g + texture(atmo, vec2(angle_light,alt)).g;
		float dens = s.r;
		sum += dens * exp(-n*(K.xyz+K.www));
		v += step;
	}

	sum *= len / atmos_height;

	return sum;
}

vec4 lerp(vec4 v[gl_MaxPatchVertices], vec3 coord)
{
	return mix(
		mix(v[0],v[1],coord.x),
		mix(v[2],v[3],coord.x),
		coord.y);
}

vec3 lerp(vec3 v[gl_MaxPatchVertices], vec3 coord)
{
	return mix(
		mix(v[0],v[1],coord.x),
		mix(v[2],v[3],coord.x),
		coord.y);
}

vec2 lerp(vec2 v[gl_MaxPatchVertices], vec3 coord)
{
	return mix(
		mix(v[0],v[1],coord.x),
		mix(v[2],v[3],coord.x),
		coord.y);
}

float lerp(float v[gl_MaxPatchVertices], vec3 coord)
{
	return mix(
		mix(v[0],v[1],coord.x),
		mix(v[2],v[3],coord.x),
		coord.y);
}

float sRGBToLinear(float s)
{
	if (s < 0.0404482362771082) return s/12.92;
	else return pow((s+0.055)/1.055,2.4);
}

float linearToSRGB(float l)
{
	if (l < 0.00313066844250063) return l*12.92;
	else return 1.055*pow(l,1.0/2.4)-0.055;
}